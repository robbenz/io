{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar mobileMenuButton = exports.mobileMenuButton = function mobileMenuButton() {\n  var selector = arguments.length <= 0 || arguments[0] === undefined ? '.mobile-menu-button' : arguments[0];\n\n  var button = document.querySelector(selector);\n  var body = document.body;\n  button.onclick = function () {\n    body.classList.toggle('js-menu-expanded');\n  };\n};\n\nexports.default = {\n  mobileMenuButton: mobileMenuButton\n};\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\n;(function ($) {\n  /**\n  * Will take children and do a expand and collapse on children.\n  *\n  * @param  {object} args Options\n  *   children: {string} Child element to target. Default: li\n  *   trigger: {string} Element to trigger the expand and collapse.\n  *     Default: .js-trigger\n  *   show: {string} Element to show when triggerd. Default: .js-expand\n  *   expandedClass: {string} Class added to child when show element is expanded.\n  *     Default: js-is-expanded\n  *\n  * @return void\n  */\n  $.fn.ioCollapse = function (args) {\n    // defaults\n    args = $.extend({\n      children: 'li',\n      trigger: '.js-trigger',\n      show: '.js-expand',\n      expandedClass: 'js-is-expanded'\n    }, args);\n\n    var el = $(this);\n    var children = el.find(args.children);\n    var trigger = children.find(args.trigger);\n    var show = children.find(args.show);\n\n    show.hide();\n\n    trigger.live('click', function () {\n      var container = $(this).parents(args.children);\n\n      if (container.hasClass(args.expandedClass)) {\n        // close all\n        el.find('.' + args.expandedClass).find(args.show).hide();\n        el.find('.' + args.expandedClass).removeClass(args.expandedClass);\n      } else {\n        // close all\n        el.find('.' + args.expandedClass).find(args.show).hide();\n        el.find('.' + args.expandedClass).removeClass(args.expandedClass);\n\n        // open\n        container.find(args.show).show();\n        container.addClass(args.expandedClass);\n      }\n    });\n  };\n\n  /**\n   * Does a test for mobile device. Returns true for mobile device.\n   *\n   * @return {Boolean}\n   */\n  $.fn.is_mobile = function () {\n    var isMobile;\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {\n      isMobile = true;\n    } else {\n      isMobile = false;\n    }\n\n    return isMobile;\n  };\n\n  /**\n   * Global smoooth scroller. NOTE: No click event inside function.\n   *\n   * @param  {object} options Scroller Options\n   *   offset: {int} Offset of the scroll. Default: 0\n   *   speed: {int} Speed of scroll. Default: 1000\n   *\n   *  Example: $('section.main').ioScroller();\n   *\n   * @return void\n   */\n  $.fn.ioScroller = function (options) {\n    // defaults\n    var settings = $.extend({\n      offset: 0,\n      speed: 1000\n    }, options);\n\n    var scrollPos = $(window).scrollTop();\n    var target = $(this);\n\n    if (target.length) {\n      $('html,body').stop(true, false).animate({\n        scrollTop: target.offset().top - settings.offset }, settings.speed);\n    }\n  };\n\n  /**\n   * Prints single div content\n   *\n   * @return void\n   */\n  $.fn.printDiv = function () {\n    var printContents = $(this).html();\n    var originalContents = $('body').html();\n    $('body').html(printContents);\n    $('body').addClass('js-print');\n    window.print();\n    $('body').html(originalContents);\n    $('body').removeClass('js-print');\n  };\n\n  /**\n   * Sets sets equal heights to all child elements\n   *\n   * @param  {int} buffer Buffer for equal heights\n   *\n   * Example: $('#parent').equalHeights(10);\n   *\n   * @return null\n   */\n  $.fn.equalHeights = function (buffer) {\n    // Defaults\n    buffer = buffer || 0;\n\n    var parentElement = $(this);\n\n    var maxHeight = 0;\n    parentElement.children().each(function () {\n      if ($(this).outerHeight() > maxHeight) {\n        maxHeight = $(this).outerHeight();\n      }\n    });\n\n    maxHeight = maxHeight + buffer;\n\n    parentElement.children().each(function () {\n      $(this).height(maxHeight);\n    });\n  };\n})(jQuery);\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar _helpers = require('./helpers.js');\n\nrequire('./jquery-functions.js');\n\n\n(0, _helpers.mobileMenuButton)();\n\n},{\"./helpers.js\":1,\"./jquery-functions.js\":2}]},{},[3]);\n"],"file":"main.js","sourceRoot":"/source/"}